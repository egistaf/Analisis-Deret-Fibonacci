#include <iostream>
#include <chrono>
#include <vector>
#include <iomanip>

using namespace std;

long long fibRecursive(long long n) {
    if (n <= 1) return n;
    return fibRecursive(n - 1) + fibRecursive(n - 2);
}

long long fibDynamic(long long n) {
    if (n <= 1) return n;
    vector<long long> fib(n + 1);
    fib[0] = 0;
    fib[1] = 1;
    for (long long i = 2; i <= n; ++i) {
        fib[i] = fib[i - 1] + fib[i - 2];
    }
    return fib[n];
}

void evaluateExecutionTime(long long (*func)(long long), long long n, const string& label) {
    auto start = chrono::high_resolution_clock::now();
    long long result = func(n);
    auto end = chrono::high_resolution_clock::now();
    chrono::duration<double, micro> duration = end - start;
    cout << label << " untuk n=" << n << " memerlukan waktu " 
         << fixed << setprecision(2) << duration.count() << " microseconds" << endl;
    cout << "Result: " << result << endl;
}

int main() {
    vector<long long> testCases = {10, 25, 30, 40, 50};
    
    for (long long n : testCases) {
        cout << "n = " << n << endl;
        evaluateExecutionTime(fibRecursive, n, "Fibonacci Rekursif");
        evaluateExecutionTime(fibDynamic, n, "Fibonacci DP");
        cout << endl;
    }

    return 0;
}
